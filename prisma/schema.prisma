// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    firstname     String?
    surname       String?
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    cart    Cart[]
    orders  Order[]
    Account Account[]
    Session Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Блюда
model Dish {
    id          String   @id @default(cuid())
    name        String
    price       Float
    description String
    image       String
    ingredients String[]
    cart        Cart[]

    compositions   Composition[]
    orderPositions OrderPosition[]
}

// Ингредиенты
model Ingredient {
    id   String @id @default(cuid())
    name String @unique

    compositions Composition[]
}

// Состав (связующая таблица для блюд и ингредиентов)
model Composition {
    id String @id @default(cuid())

    dish   Dish   @relation(fields: [dishID], references: [id])
    dishID String

    ingredient   Ingredient @relation(fields: [ingredientID], references: [id])
    ingredientID String

    @@unique([dishID, ingredientID], name: "composition_unique")
}

// Корзина
model Cart {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    dish   Dish   @relation(fields: [dishID], references: [id])
    dishID String

    count Int

    @@unique([userId, dishID], name: "user_dish_unique")
}

// Заказ
model Order {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    orderPositions OrderPosition[]
}

// Позиция в заказе (связующая таблица для заказа и блюд)
model OrderPosition {
    id String @id @default(cuid())

    order   Order  @relation(fields: [orderID], references: [id])
    orderID String

    dish   Dish   @relation(fields: [dishID], references: [id])
    dishID String

    count Int
}
